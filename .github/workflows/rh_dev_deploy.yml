name: RH-DEV Deployment Pipeline

on:
  workflow_run:
    workflows: ["RH-DEV Build & Deployment Pipeline"]
    branches:
      - dev-ci-cd-setup
    types:
      - completed

jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./

      - name: Deploy to Payara
        env:
          SERVER_IP: ${{ secrets.DEV_SERVER_IP }}
          SERVER_USER: ${{ secrets.DEV_SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          PAYARA_ADMIN_PASS: ${{ secrets.DEV_PAYARA_ADMIN_PASS }}
        run: |
          # Add SSH private key to the SSH agent
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Variables
          WAR_NAME="rh.war"
          WAR_DIR="/home/appuser/app/latest"
          APP_NAME="rh"
          SUBDOMAIN="dev"

          # Ensure deployment directory exists
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            sudo mkdir -p $WAR_DIR
            sudo chown -R appuser:appuser /home/appuser/app/latest
            sudo su - appuser
            cd $WAR_DIR

            # Remove old backup if it exists
            if [ -f $WAR_NAME.old ]; then
              rm $WAR_NAME.old
            fi

            # If the current WAR file exists, back it up
            if [ -f $WAR_NAME ]; then
              mv $WAR_NAME $WAR_NAME.old
            fi
          "

          # Copy new WAR file to the server
          rsync -aL --progress -e "ssh -i private_key.pem" ./*.war $SERVER_USER@$SERVER_IP:/tmp/$WAR_NAME

          # Move the file to /home/appuser/app/latest/ and set permissions
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            sudo mv /tmp/$WAR_NAME $WAR_DIR/
            sudo chown appuser:appuser $WAR_DIR/$WAR_NAME
          "

          # Deploy the WAR using asadmin
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            sudo su - appuser
            echo 'AS_ADMIN_PASSWORD=${{ secrets.DEV_PAYARA_ADMIN_PASS }}' > /tmp/payara-admin-pass.txt
            /opt/payara5/bin/asadmin --user admin --passwordfile /tmp/payara-admin-pass.txt undeploy $APP_NAME || true
            /opt/payara5/bin/asadmin --user admin --passwordfile /tmp/payara-admin-pass.txt deploy --force=true --contextroot $APP_NAME $WAR_DIR/$WAR_NAME
            rm /tmp/payara-admin-pass.txt
          "

          # Validate if the application is running
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            sudo su - appuser
            echo 'AS_ADMIN_PASSWORD=${{ secrets.DEV_PAYARA_ADMIN_PASS }}' > /tmp/payara-admin-pass.txt
            if /opt/payara5/bin/asadmin --user admin --passwordfile /tmp/payara-admin-pass.txt list-applications | grep -q '$APP_NAME'; then
              echo 'Application is running.'
            else
              echo 'Application failed to start.'
            fi
            rm /tmp/payara-admin-pass.txt
          "

          # Check if the application is reachable
          for i in {1..5}; do
            RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://$SUBDOMAIN.carecode.org/$APP_NAME/faces/index1.xhtml)
            if [ "$RESPONSE_CODE" == "200" ]; then
              echo "Application is reachable and healthy."
              break
            elif [ "$i" == "5" ]; then
              echo "Application is not reachable or unhealthy at https://$SUBDOMAIN.carecode.org/$APP_NAME (HTTP $RESPONSE_CODE)"
              break
            fi
            sleep 10
          done

          # Cleanup
          rm -f private_key.pem
