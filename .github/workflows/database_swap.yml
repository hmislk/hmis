name: QA Database Dump and Replace

on:
  workflow_dispatch:
    inputs:
      fromEnv:
        description: 'Select Environment to take Dump'
        required: true
        type: choice
        options:
          - COOP_Dev
          - COOP_Prod
          - Ruhunu_Prod
          - MP_Prod
      toEnv:
        description: 'Select Environment to Replace'
        required: true
        type: choice
        options:
          - QA
      date:
        description: 'Select Date (YYYY-MM-DD)'
        required: true

jobs:
  deployment:
    name: Schedule DB Swap
    runs-on: ubuntu-latest
    steps:
      - name: Set Secret Names Based on Selection
        id: set_vars
        run: |
          if [[ "${{ inputs.fromEnv }}" == "COOP_Dev" ]]; then
            echo "FROM_SERVER_IP_SECRET=DEV_SERVER_IP" >> $GITHUB_ENV
            echo "FROM_SERVER_SSH_KEY_SECRET=DEV_SSH_PRIVATE_KEY" >> $GITHUB_ENV
            echo "FROM_DB_IP=DEV_DB_IP" >> $GITHUB_ENV
            echo "FROM_DB_USERNAME=DEV_DB_USERNAME" >> $GITHUB_ENV
            echo "FROM_DB_PASSWORD=DEV_DB_PASSWORD" >> $GITHUB_ENV
            echo "FROM_DB_NAME=DEV_DB_NAME" >> $GITHUB_ENV
          elif [[ "${{ inputs.fromEnv }}" == "COOP_Prod" ]]; then
            echo "FROM_SERVER_IP_SECRET=COOP_PROD_SERVER_IP" >> $GITHUB_ENV
            echo "FROM_SERVER_SSH_KEY_SECRET=COOP_PROD_SSH_PRIVATE_KEY" >> $GITHUB_ENV
            echo "FROM_DB_IP=COOP_PROD_DB_IP" >> $GITHUB_ENV
            echo "FROM_DB_USERNAME=COOP_PROD_DB_USERNAME" >> $GITHUB_ENV
            echo "FROM_DB_PASSWORD=COOP_PROD_DB_PASSWORD" >> $GITHUB_ENV
            echo "FROM_DB_NAME=COOP_PROD_DB_NAME" >> $GITHUB_ENV
          elif [[ "${{ inputs.fromEnv }}" == "Ruhunu_Prod" ]]; then
            echo "FROM_SERVER_IP_SECRET=RUHUNU_PROD_SERVER_IP" >> $GITHUB_ENV
            echo "FROM_SERVER_SSH_KEY_SECRET=RUHUNU_PROD_SSH_PRIVATE_KEY" >> $GITHUB_ENV
            echo "FROM_DB_IP=RUHUNU_PROD_DB_IP" >> $GITHUB_ENV
            echo "FROM_DB_USERNAME=RUHUNU_PROD_DB_USERNAME" >> $GITHUB_ENV
            echo "FROM_DB_PASSWORD=RUHUNU_PROD_DB_PASSWORD" >> $GITHUB_ENV
            echo "FROM_DB_NAME=RUHUNU_PROD_DB_NAME" >> $GITHUB_ENV
          elif [[ "${{ inputs.fromEnv }}" == "MP_Prod" ]]; then
            echo "FROM_SERVER_IP_SECRET=MP_PROD_SERVER_IP" >> $GITHUB_ENV
            echo "FROM_SERVER_SSH_KEY_SECRET=MP_PROD_SSH_PRIVATE_KEY" >> $GITHUB_ENV
            echo "FROM_DB_IP=MP_PROD_DB_IP" >> $GITHUB_ENV
            echo "FROM_DB_USERNAME=MP_PROD_DB_USERNAME" >> $GITHUB_ENV
            echo "FROM_DB_PASSWORD=MP_PROD_DB_PASSWORD" >> $GITHUB_ENV
            echo "FROM_DB_NAME=MP_PROD_DB_NAME" >> $GITHUB_ENV
          fi

          if [[ "${{ inputs.toEnv }}" == "QA" ]]; then
            echo "TO_SERVER_IP_SECRET=QA_SERVER_IP" >> $GITHUB_ENV
            echo "TO_SERVER_SSH_KEY_SECRET=QA_SERVER_SSH_KEY" >> $GITHUB_ENV
            echo "TO_DB_IP=QA_DB_IP" >> $GITHUB_ENV
            echo "TO_DB_USERNAME=QA_DB_USERNAME" >> $GITHUB_ENV
            echo "TO_DB_PASSWORD=QA_DB_PASSWORD" >> $GITHUB_ENV
            echo "TO_DB_NAME=QA_DB_NAME" >> $GITHUB_ENV
          fi

      - name: Schedule DB Swap on Observability VM
        env:
          OBSERVABILITY_IP: ${{ secrets.OBSERVABILITY_SERVER_IP }}
          OBSERVABILITY_SSH_KEY: ${{ secrets.OBSERVABILITY_SSH_PRIVATE_KEY }}
          FROM_ENV: ${{ inputs.fromEnv }}
          TO_ENV: ${{ inputs.toEnv }}
          FROM_SERVER_IP: ${{ secrets[env.FROM_SERVER_IP_SECRET] }}
          TO_SERVER_IP: ${{ secrets[env.TO_SERVER_IP_SECRET] }}
          FROM_DB_IP: ${{ secrets[env.FROM_DB_IP] }}
          FROM_DB_USERNAME: ${{ secrets[env.FROM_DB_USERNAME] }}
          FROM_DB_PASSWORD: ${{ secrets[env.FROM_DB_PASSWORD] }}
          FROM_DB_NAME: ${{ secrets[env.FROM_DB_NAME] }}
          TO_DB_IP: ${{ secrets[env.TO_DB_IP] }}
          TO_DB_USERNAME: ${{ secrets[env.TO_DB_USERNAME] }}
          TO_DB_PASSWORD: ${{ secrets[env.TO_DB_PASSWORD] }}
          FROM_SERVER_SSH_KEY_SECRET: ${{ secrets[env.FROM_SERVER_SSH_KEY_SECRET] }}
          TO_SERVER_SSH_KEY_SECRET: ${{ secrets[env.TO_SERVER_SSH_KEY_SECRET] }}
          TO_DB_NAME: ${{ secrets[env.TO_DB_NAME] }}
          DATE: ${{ inputs.date }}
        run: |
          echo "$OBSERVABILITY_SSH_KEY" > observability_key.pem
          chmod 600 observability_key.pem
          
          UTC_TIME=$(date -d "${DATE}T02:00:00+05:30" -u "+%H:%M %Y-%m-%d")

          HOUR=$(echo "$UTC_TIME" | awk '{print $1}' | cut -d':' -f1)
          MINUTE=$(echo "$UTC_TIME" | awk '{print $1}' | cut -d':' -f2)
          UTC_DATE=$(echo "$UTC_TIME" | awk '{print $2}')
          
          ssh -o StrictHostKeyChecking=no -i observability_key.pem azureuser@$OBSERVABILITY_IP "
            echo '/home/azureuser/utils/swap_databases/db_swap.sh $FROM_ENV $TO_ENV $FROM_SERVER_IP $TO_SERVER_IP $FROM_DB_IP $TO_DB_IP \
            $FROM_DB_USERNAME $TO_DB_USERNAME $FROM_DB_PASSWORD $TO_DB_PASSWORD $FROM_DB_NAME $TO_DB_NAME' | at $HOUR:$MINUTE $UTC_DATE
          "
          rm observability_key.pem
